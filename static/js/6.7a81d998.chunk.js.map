{"version":3,"sources":["components/common/Modal/Modal.tsx","components/ui/Input/Input.tsx","components/modals/Plan/Plan.tsx"],"names":["Wrapper","Header","Title","CloseWrapper","Content","Modal","children","close","onClick","size","InputStyled","Input","props","FormRow","FormGroup","Label","Footer","Plan","useState","tokens","useStore","itemsTokens","useMemo","token","title","value","mintAddress","handleSubmit","a","createSubscriptionPlanFx","String","maxAmount","Number","subscriptionTimeframe","selectedSubscriptionTimeframe","placeholder","selected","items","onChange","nextValue","setSelectedToken","type","e","setMaxAmount","setSelectedSubscriptionTimeframe"],"mappings":"kUAKMA,EAAO,qDAYPC,EAAM,qDAWNC,EAAK,oDAKLC,EAAY,0DAcZC,EAAO,sDAYAC,EAAmB,SAAC,GAA+B,IAA/B,EAA+B,EAA/B,QAA+B,EAA/B,MAAgBC,EAAe,EAAfA,SAC/C,OACE,yBACE,yBACE,yBAAO,GACNC,EACC,qBAAcC,QAAd,GACE,uBAAgBC,KAAhB,MAFJ,MAMF,yBAAS,K,WClETT,EAAO,qDAUPU,EAAW,4DAcJC,EAAoDC,YAC/D,OACE,yBAEE,yB,4CCpBAC,EAAO,sDAQPC,EAAS,wDAQTC,EAAK,qDASLC,EAAM,qDAWCC,EAAkB,SAAC,GAAc,IAAZV,EAAY,EAAZA,MAAY,EACFW,qBADE,mBACtC,EADsC,KACtC,EADsC,OAKxCA,qBALwC,mBAEtC,EAFsC,KAEtC,EAFsC,OAMVA,qBANU,mBAMtC,EANsC,KAMtC,EANsC,KAOtCC,EAASC,YAAf,KAEMC,EAAcC,mBAClB,kBACEH,EAAA,KAAYI,YAAD,MAAY,CACrBC,MAAOD,EADc,YAErBE,MAAOF,EAAMG,kBAEjB,CANF,IAsBMC,EAAY,uCAAG,sBAAAC,EAAA,sEACbC,YAAyB,CAC7BN,MAAO,IAAI,EAAJ,EAAcO,OADQ,IAE7BC,UAAWC,OAFkB,GAG7BC,sBAAuBD,OAAOE,KAJb,OAOnB3B,IAPmB,2CAAH,qDAUlB,OACE,qBAAOiB,MAAP,kBAA+BjB,MAA/B,GACE,yBACE,yBACE,kCACA,uBACE4B,YADF,eAEEC,SAFF,EAGEC,MAHF,EAIEC,SAhCgB,SAACC,GACzBC,SAmCI,yBACE,kCACA,qBACEC,KADF,OAEEN,YAFF,MAGEG,SAjCoB,SAACI,GAC7B,IAAMX,EAAYW,SAAlB,MACAC,UAqCE,yBACE,qCACA,uBACER,YADF,kBAEEC,SAFF,EAGEC,MAAO,CACL,CAAEb,MAAF,QAAkBC,MAAO,GACzB,CAAED,MAAF,SAAmBC,MAAO,GAC1B,CAAED,MAAF,UAAoBC,MAAO,IAC3B,CAAED,MAAF,SAAmBC,MAAO,MAE5Ba,SAtDkC,SAACC,GACzCK,SA0DE,yBACE,uBAAQpC,QAAR,qB","file":"static/js/6.7a81d998.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { IoCloseOutline } from 'react-icons/io5';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-basis: 432px;\n\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 0 1px 0 rgb(19 45 74 / 24%), 0 24px 24px 0 rgb(19 45 74 / 4%),\n    0 2px 2px 0 rgb(19 45 74 / 4%), 0 4px 4px 0 rgb(19 45 74 / 4%),\n    0 8px 8px 0 rgb(19 45 74 / 4%), 0 16px 16px 0 rgb(19 45 74 / 4%);\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n\n  padding: 20px;\n\n  border-bottom: 1px solid #f0f3f7;\n`;\n\nconst Title = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n`;\n\nconst CloseWrapper = styled.div`\n  position: absolute;\n  right: 16px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: 20px;\n`;\n\ninterface Props {\n  title: string;\n  close?: () => void;\n}\n\nexport const Modal: FC<Props> = ({ title, close, children }) => {\n  return (\n    <Wrapper>\n      <Header>\n        <Title>{title}</Title>\n        {close ? (\n          <CloseWrapper onClick={close}>\n            <IoCloseOutline size={26} />\n          </CloseWrapper>\n        ) : null}\n      </Header>\n      <Content>{children}</Content>\n    </Wrapper>\n  );\n};\n","import React, { FC, InputHTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  display: flex;\n\n  background-color: rgb(255, 255, 255);\n  border: 1px rgb(209, 218, 230);\n  border-radius: 5px;\n  box-shadow: 0 0 0 1px rgb(209 218 230);\n  transition: box-shadow 200ms cubic-bezier(0.64, 0, 0.35, 1) 0s;\n`;\n\nconst InputStyled = styled.input`\n  width: 100%;\n  height: 38px;\n  padding: 7px 12px 9px;\n\n  color: rgb(34, 57, 84);\n  font-size: 14px;\n  outline: none;\n\n  &::placeholder {\n    color: #96a3b3;\n  }\n`;\n\nexport const Input: FC<InputHTMLAttributes<HTMLInputElement>> = (props) => {\n  return (\n    <Wrapper>\n      {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n      <InputStyled {...props} />\n    </Wrapper>\n  );\n};\n","import React, { FC, useMemo, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { useStore } from 'effector-react';\nimport { PublicKey } from '@solana/web3.js';\nimport { Modal } from 'components/common/Modal';\nimport { Input } from 'components/ui/Input';\nimport { SelectValueType, Select } from 'components/ui/Select';\nimport { Button } from 'components/ui/Button';\nimport { $tokens } from 'models/wallet';\nimport { createSubscriptionPlanFx } from 'models/connection';\n\nconst FormRow = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 32px;\n  }\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n\n  margin-bottom: 16px;\n`;\n\nconst Label = styled.label`\n  margin-bottom: 6px;\n\n  color: #042040;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 22px;\n`;\n\nconst Footer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  margin-top: 4px;\n`;\n\ninterface Props {\n  close: () => void;\n}\n\nexport const Plan: FC<Props> = ({ close }) => {\n  const [selectedToken, setSelectedToken] = useState<SelectValueType>();\n  const [\n    selectedSubscriptionTimeframe,\n    setSelectedSubscriptionTimeframe,\n  ] = useState<SelectValueType>();\n  const [maxAmount, setMaxAmount] = useState<string>();\n  const tokens = useStore($tokens);\n\n  const itemsTokens = useMemo(\n    () =>\n      tokens.map((token) => ({\n        title: token.tokenSymbol,\n        value: token.mintAddress,\n      })),\n    [tokens],\n  );\n\n  const handleTokenChange = (nextValue: SelectValueType) => {\n    setSelectedToken(nextValue);\n  };\n\n  const handleSubscriptionTimeframeChange = (nextValue: SelectValueType) => {\n    setSelectedSubscriptionTimeframe(nextValue);\n  };\n\n  const handleMaxAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const maxAmount = e.target.value;\n    setMaxAmount(maxAmount);\n  };\n\n  const handleSubmit = async () => {\n    await createSubscriptionPlanFx({\n      token: new PublicKey(String(selectedToken)),\n      maxAmount: Number(maxAmount),\n      subscriptionTimeframe: Number(selectedSubscriptionTimeframe),\n    });\n\n    close();\n  };\n\n  return (\n    <Modal title=\"Create new plan\" close={close}>\n      <FormRow>\n        <FormGroup>\n          <Label>Token</Label>\n          <Select\n            placeholder=\"Choose token\"\n            selected={selectedToken}\n            items={itemsTokens}\n            onChange={handleTokenChange}\n          />\n        </FormGroup>\n\n        <FormGroup>\n          <Label>Price</Label>\n          <Input\n            type=\"text\"\n            placeholder=\"0.1\"\n            onChange={handleMaxAmountChange}\n          />\n          {/* TODO: custom price */}\n        </FormGroup>\n      </FormRow>\n\n      <FormGroup>\n        <Label>Interval</Label>\n        <Select\n          placeholder=\"Choose interval\"\n          selected={selectedSubscriptionTimeframe}\n          items={[\n            { title: 'Daily', value: 1 },\n            { title: 'Weekly', value: 7 },\n            { title: 'Monthly', value: 30 },\n            { title: 'Yearly', value: 365 },\n          ]}\n          onChange={handleSubscriptionTimeframeChange}\n        />\n        {/* TODO: custom interval */}\n      </FormGroup>\n\n      <Footer>\n        <Button onClick={handleSubmit}>Create Plan</Button>\n      </Footer>\n    </Modal>\n  );\n};\n"],"sourceRoot":""}