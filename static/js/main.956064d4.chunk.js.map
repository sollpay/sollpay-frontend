{"version":3,"sources":["lib/routing/index.ts","pages/home/model.ts","models/connection/structs.ts","components/common/ModalManager/constants.ts","lib/sollpay/sollpay.ts","models/connection/effects/createSubscriptionFx.ts","models/connection/effects/findSubscriptionPlansFx.ts","models/connection/effects/findSubscriptionsFx.ts","components/ui/Select/Select.tsx","api/wallet/LocalWallet.ts","lib/sollpay/utils/send-and-confirm-transaction.ts","models/wallet/index.ts","models/app/index.ts","models/connection/index.ts","components/common/Card/Card.tsx","components/common/Subscribe/model.ts","components/common/Subscribe/Subscribe.tsx","pages/home/Home.tsx","pages/notFound/NotFound.tsx","pages/select/Select.tsx","routes.tsx","components/common/ModalManager/ModalManager.tsx","App.tsx","models/app/init.ts","models/connection/effects/createSubscriptionPlanFx.ts","models/connection/effects/findSubscriptionPlanFx.ts","models/connection/effects/getParsedTokenAccountsByOwnerFx.ts","models/wallet/init.ts","models/modals/init.ts","index.tsx","reportWebVitals.ts","lib/sollpay/layout.ts","api/wallet/index.ts","api/wallet/SolletWallet.ts","api/connection/index.ts","api/connection/utils/retryableProxy.ts","api/wallet/Wallet.ts","constants/common.ts","lib/sollpay/layouts/subscriptionPlan.ts","models/modals/index.ts","lib/sollpay/layouts/subscription.ts","config/index.ts","components/ui/Button/Button.tsx","utils/common.ts","components/common/Header/Header.tsx","components/common/MainContainer/MainContainer.tsx"],"names":["history","createBrowserHistory","connectAndCreateClicked","app","createEvent","watch","a","$connected","getState","connectFx","push","AccountInfoResult","struct","executable","owner","lamports","data","rentEpoch","ProgramAccountInfoResult","pubkey","account","GetProgramAccountsRpcResult","resultDescription","jsonRpcVersion","literal","union","jsonrpc","id","error","result","jsonRpcResult","array","MODAL_PLAN","SollPay","connection","subscriptionPlan","sollPayProgramId","tokenProgramId","token","feeAccount","authority","payer","this","subscriptionPlanAccount","nonce","subscriptionTimeframe","maxAmount","sollPay","publicKey","getMinBalanceRentForExemptSubscriptionPlan","balanceNeeded","transaction","Transaction","add","SystemProgram","createAccount","fromPubkey","newAccountPubkey","space","SubscriptionPlanLayout","span","programId","createSubscriptionPlanInstruction","sendAndConfirmTransaction","recurringPaymentsProgramId","dataLayout","BufferLayout","Layout","Buffer","alloc","encode","instruction","subscription_timeframe","Numberu64","toBuffer","max_amount","keys","isSigner","isWritable","TransactionInstruction","subscriptionAccount","tokenAccount","SYSVAR_CLOCK_PUBKEY","getMinimumBalanceForRentExemption","SubscriptionLayout","createSubscriptionInstruction","uint64","createSubscriptionFx","use","subscriptionPlanAddress","tokenAddress","getConnection","getWallet","Account","instructions","getMinBalanceRentForExemptSubscription","SOLLPAY_PROGRAM_ID","makeTransaction","sendTransaction","findSubscriptionPlansFx","wallet","filters","memcmp","offset","offsetOf","bytes","toBase58","dataSize","_rpcRequest","commitment","encoding","unsafeRes","res","Error","message","assert","map","parsedData","parseSubscriptionPlanData","from","isInitialized","PublicKey","filter","complement","isNil","findSubscriptionsFx","parseSubscriptionData","Wrapper","SelectButton","Value","Placeholder","SelectListContainer","SelectList","SelectOptionText","SelectOption","Select","onChange","useState","selectRef","useRef","selectListRef","handleAwayClick","e","setIsOpen","useEffect","window","selectedItem","useMemo","items","item","selected","ref","onClick","size","color","isOpen","role","nextValue","value","key","className","classNames","isSelected","title","String","LocalWallet","network","isDev","localPrivateKey","JSON","parse","setImmediate","emit","WalletEvent","CONNECT","serializeMessage","signature","nacl","sign","detached","secretKey","addSignature","Promise","resolve","Wallet","signers","realSendAndConfirmTransaction","skipPreflight","preflightCommitment","createEffect","disconnectFx","changeCluster","$cluster","createStore","$type","WalletType","SOLLET","$tokens","cluster","TOKENS","createDomain","AppGate","createGate","getParsedTokenAccountsByOwnerFx","createSubscriptionPlanFx","findSubscriptionPlanFx","Card","style","SubscribeGate","$subscriptionPlan","$store","combine","connected","tokens","isLoading","pending","isSubscribing","isFetching","one","two","forward","open","to","guard","source","clock","Boolean","target","on","doneData","_","WrapperCard","Title","Rocket","Group","Price","SubscribeButton","Subscribe","planAddress","useGate","useStore","handleSubscribeClick","isDisabled","renderSubscriptionTimeframe","disabled","Container","Hero","Description","ButtonStyled","Home","showConnect","NotFound","CardStyled","ColumnLink","LeftColumnLink","LeftPic","Delimiter","RightColumnLink","RightPic","Pages","renderRoutes","isAuth","path","exact","component","needAuth","lazy","route","ModalContainer","ModalWrapper","ModalBackground","modalsMap","Map","ModalManager","modals","closeTopModal","modal","last","modalId","modalRef","modalsRefs","closeModalFx","handleWrapperClick","dialogs","props","ModalComponent","modalType","getReadyDialogs","createRef","setModalsRefs","state","fallback","close","dayjs","extend","relativeTime","localizedFormat","App","onCreateStore","newStore","reset","onCreateEffect","newEffect","failData","payload","console","findProgramAddress","SOLLPAY_FEE_ACCOUNT","TOKEN_PROGRAM_ID","getAccountInfo","info","getParsedTokenAccountsByOwner","mint","log","type","WalletAPI","DISCONNECT","CONFIRMED","transactionSignature","done","persist","store","promises","dialogInfo","get","delete","closeModal","openModalFx","$modals","some","openModal","promise","set","dialog","concat","createInspector","onPerfEntry","globals","ReactDOM","document","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","property","DEFAULT_PROVIDER","SolletWallet","provider","solletWallet","SolletWalletAdapter","connect","disconnect","signTransaction","POST_TRANSACTION_SLEEP_MS","postTransactionSleepMS","ERROR_CONNECT_FIRST","createWallet","getNetwork","LOCAL","BONFIDA","newWallet","getRecentBlockhash","recentBlockhash","blockhash","signatures","length","partialSign","defaultSendOptions","DEFAULT_COMMITMENT","awaitConfirmation","confirmTransaction","sleep","signed","sendRawTransaction","serialize","currentCluster","defaultRetryOptions","count","intervalMS","backoutMultiplier","LOCALNET_URL","defaultCommitment","createConnection","memoizeWith","identity","Connection","forEach","fnName","fn","retryOptions","options","mergeLeft","retryReducer","thisArg","argArray","previousValue","currentValue","currentIndex","call","apply","catch","sleepMs","Proxy","Array","reduce","retryableProxy","clusterApiUrl","confirmViaSocket","onSignature","signatureResult","confirmViaHttp","race","signedTransaction","SIGNED","EventEmitter","u8","accountInfo","decode","u64","fromBuffer","isApproved","cycleStart","withdrawnAmount","process","APP_LOCAL_WALLET_PRIVATE_KEY","Number","ButtonText","Button","ms","setTimeout","shortAddress","address","slice","Logo","Right","Header","placeholder","MainContainer","children"],"mappings":"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","file":"static/js/main.956064d4.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","import { app } from 'models/app';\nimport { ButtonClick } from 'types/effector';\nimport { $connected, connectFx } from 'models/wallet';\nimport { history } from 'lib/routing';\n\nexport const connectAndCreateClicked = app.createEvent<ButtonClick>();\n\nconnectAndCreateClicked.watch(async () => {\n  const connected = $connected.getState();\n  if (!connected) {\n    await connectFx();\n  }\n  history.push('/select');\n});\n","import { struct } from 'superstruct';\n\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nexport const GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n","export const MODAL_PLAN = 'MODAL_PLAN';\n","import {\n  Connection,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  Account,\n  TransactionInstruction,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\n\nimport * as BufferLayout from 'buffer-layout';\nimport { Numberu64 } from '@solana/spl-token-swap';\nimport * as Layout from './layout';\nimport { SubscriptionLayout } from './layouts/subscription';\nimport { SubscriptionPlanLayout } from './layouts/subscriptionPlan';\nimport { sendAndConfirmTransaction } from './utils/send-and-confirm-transaction';\n\nexport class SollPay {\n  private connection: Connection;\n\n  /**\n   * Program Identifier for the SollPay program\n   */\n  private sollPayProgramId: PublicKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  private tokenProgramId: PublicKey;\n\n  /**\n   * The public key identifying subscription plan program\n   */\n  private subscriptionPlan: PublicKey;\n\n  /**\n   * The public key for the subscription plan token mint\n   */\n  private token: PublicKey;\n\n  /**\n   * The public key for the fee account receiving fee\n   */\n  private feeAccount: PublicKey;\n\n  /**\n   * Authority\n   */\n  private authority: PublicKey;\n\n  /**\n   * Fee payer\n   */\n  private payer: Account;\n\n  /**\n   * Owner\n   */\n  private owner: PublicKey;\n\n  constructor(\n    connection: Connection,\n    subscriptionPlan: PublicKey,\n    sollPayProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    token: PublicKey,\n    feeAccount: PublicKey,\n    authority: PublicKey,\n    payer: Account,\n    owner: PublicKey,\n  ) {\n    this.connection = connection;\n    this.subscriptionPlan = subscriptionPlan;\n    this.sollPayProgramId = sollPayProgramId;\n    this.tokenProgramId = tokenProgramId;\n    this.token = token;\n    this.feeAccount = feeAccount;\n    this.authority = authority;\n    this.payer = payer;\n    this.owner = owner;\n  }\n\n  static async createSubscriptionPlan(\n    connection: Connection,\n    payer: Account,\n    subscriptionPlanAccount: Account, // TODO: maybe inside\n    authority: PublicKey, // TODO: maybe inside\n    token: PublicKey,\n    feeAccount: PublicKey,\n    sollPayProgramId: PublicKey,\n    tokenProgramId: PublicKey,\n    nonce: number,\n    owner: PublicKey,\n    subscriptionTimeframe: number | Numberu64,\n    maxAmount: number | Numberu64,\n  ) {\n    const sollPay = new SollPay(\n      connection,\n      subscriptionPlanAccount.publicKey,\n      sollPayProgramId,\n      tokenProgramId,\n      token,\n      feeAccount,\n      authority,\n      payer,\n      owner,\n    );\n\n    // Allocate memory for the account\n    const balanceNeeded = await SollPay.getMinBalanceRentForExemptSubscriptionPlan(\n      connection,\n    );\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: subscriptionPlanAccount.publicKey,\n        lamports: balanceNeeded,\n        space: SubscriptionPlanLayout.span,\n        programId: sollPayProgramId,\n      }),\n    );\n\n    transaction.add(\n      SollPay.createSubscriptionPlanInstruction(\n        subscriptionPlanAccount,\n        authority,\n        token,\n        feeAccount,\n        tokenProgramId,\n        sollPayProgramId,\n        nonce,\n        owner,\n        subscriptionTimeframe,\n        maxAmount,\n      ),\n    );\n\n    await sendAndConfirmTransaction(\n      'createAccount and CreateSubscriptionPlan',\n      connection,\n      transaction,\n      payer,\n      subscriptionPlanAccount,\n    );\n\n    return sollPay;\n  }\n\n  static createSubscriptionPlanInstruction(\n    subscriptionPlanAccount: Account,\n    authority: PublicKey,\n    token: PublicKey,\n    feeAccount: PublicKey,\n    tokenProgramId: PublicKey,\n    recurringPaymentsProgramId: PublicKey,\n    nonce: number,\n    owner: PublicKey,\n    subscriptionTimeframe: number | Numberu64,\n    maxAmount: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('nonce'),\n      Layout.uint64('subscription_timeframe'),\n      Layout.uint64('max_amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 0, // CreateSubscriptionPlan instruction\n        nonce,\n        subscription_timeframe: new Numberu64(subscriptionTimeframe).toBuffer(),\n        max_amount: new Numberu64(maxAmount).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {\n        pubkey: subscriptionPlanAccount.publicKey,\n        isSigner: false,\n        isWritable: true,\n      },\n      { pubkey: owner, isSigner: false, isWritable: false },\n      { pubkey: authority, isSigner: false, isWritable: false },\n      { pubkey: token, isSigner: false, isWritable: false },\n      // { pubkey: feeAccount, isSigner: false, isWritable: false },\n      // { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      keys,\n      programId: recurringPaymentsProgramId,\n      data,\n    });\n  }\n\n  static createSubscriptionInstruction(\n    subscriptionAccount: Account,\n    subscriptionPlanAccount: PublicKey,\n    tokenAccount: PublicKey,\n    // authority: PublicKey,\n    // owner: PublicKey,\n    feeAccount: PublicKey,\n    tokenProgramId: PublicKey,\n    recurringPaymentsProgramId: PublicKey,\n    // nonce: number,\n    subscriptionTimeframe: number | Numberu64,\n    maxAmount: number | Numberu64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      // BufferLayout.u8('nonce'),\n      Layout.uint64('subscription_timeframe'),\n      Layout.uint64('max_amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // CreateSubscription instruction\n        // nonce,\n        subscription_timeframe: new Numberu64(subscriptionTimeframe).toBuffer(),\n        max_amount: new Numberu64(maxAmount).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {\n        pubkey: subscriptionAccount.publicKey,\n        isSigner: false,\n        isWritable: true,\n      },\n      { pubkey: subscriptionPlanAccount, isSigner: false, isWritable: false },\n      // { pubkey: owner, isSigner: false, isWritable: false },\n      // { pubkey: authority, isSigner: false, isWritable: false },\n      { pubkey: tokenAccount, isSigner: false, isWritable: false },\n      { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: feeAccount, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      keys,\n      programId: recurringPaymentsProgramId,\n      data,\n    });\n  }\n\n  /**\n   * Get the minimum balance for the subscription plan account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptSubscriptionPlan(\n    connection: Connection,\n  ): Promise<number> {\n    return connection.getMinimumBalanceForRentExemption(\n      SubscriptionPlanLayout.span,\n    );\n  }\n\n  /**\n   * Get the minimum balance for the subscription account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptSubscription(\n    connection: Connection,\n  ): Promise<number> {\n    return connection.getMinimumBalanceForRentExemption(\n      SubscriptionLayout.span,\n    );\n  }\n}\n","import {\n  Account,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { Numberu64 } from '@solana/spl-token-swap';\nimport * as BufferLayout from 'buffer-layout';\nimport { uint64 } from 'lib/sollpay/layout';\nimport { getConnection } from 'api/connection';\nimport { getWallet, makeTransaction, sendTransaction } from 'api/wallet';\nimport { SOLLPAY_PROGRAM_ID } from 'constants/common';\nimport { createSubscriptionFx } from '..';\nimport { SollPay } from '../../../lib/sollpay';\nimport { SubscriptionLayout } from '../../../lib/sollpay/layouts/subscription';\n\nfunction createSubscriptionInstruction(\n  subscriptionAccount: PublicKey,\n  subscriptionPlanAccount: PublicKey,\n  tokenAccount: PublicKey,\n  owner: PublicKey,\n  subscriptionTimeframe: number | Numberu64,\n  maxAmount: number | Numberu64,\n  recurringPaymentsProgramId: PublicKey,\n): TransactionInstruction {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8('instruction'),\n    uint64('subscription_timeframe'),\n    uint64('max_amount'),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 1, // CreateSubscription instruction\n      subscription_timeframe: new Numberu64(subscriptionTimeframe).toBuffer(),\n      max_amount: new Numberu64(maxAmount).toBuffer(),\n    },\n    data,\n  );\n\n  const keys = [\n    { pubkey: subscriptionAccount, isSigner: false, isWritable: true },\n    { pubkey: subscriptionPlanAccount, isSigner: false, isWritable: false },\n    { pubkey: tokenAccount, isSigner: false, isWritable: false },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: recurringPaymentsProgramId,\n    data,\n  });\n}\n\ncreateSubscriptionFx.use(\n  async ({\n    subscriptionPlanAddress,\n    tokenAddress,\n    subscriptionTimeframe,\n    maxAmount,\n  }) => {\n    const connection = getConnection();\n    const owner = getWallet().pubkey;\n    const subscriptionAccount = new Account();\n\n    const instructions: TransactionInstruction[] = [];\n\n    // SubscriptionPlan account\n    instructions.push(\n      SystemProgram.createAccount({\n        fromPubkey: owner,\n        newAccountPubkey: subscriptionAccount.publicKey,\n        lamports: await SollPay.getMinBalanceRentForExemptSubscription(\n          connection,\n        ),\n        space: SubscriptionLayout.span,\n        programId: SOLLPAY_PROGRAM_ID,\n      }),\n    );\n\n    // createSubscriptionPlan instruction\n    instructions.push(\n      createSubscriptionInstruction(\n        subscriptionAccount.publicKey,\n        subscriptionPlanAddress,\n        tokenAddress,\n        owner,\n        subscriptionTimeframe,\n        maxAmount,\n        SOLLPAY_PROGRAM_ID,\n      ),\n    );\n\n    const transaction = await makeTransaction(instructions, [\n      subscriptionAccount,\n    ]);\n    return sendTransaction(transaction);\n  },\n);\n","import assert from 'assert';\nimport { PublicKey } from '@solana/web3.js';\nimport { complement, isNil } from 'ramda';\nimport { getConnection } from 'api/connection';\nimport { getWallet } from 'api/wallet';\nimport {\n  parseSubscriptionPlanData,\n  SubscriptionPlanLayout,\n} from 'lib/sollpay/layouts/subscriptionPlan';\nimport { GetProgramAccountsRpcResult } from '../structs';\nimport { findSubscriptionPlansFx } from '..';\nimport { SOLLPAY_PROGRAM_ID } from '../../../constants/common';\n\nfindSubscriptionPlansFx.use(async () => {\n  const connection = getConnection();\n  const wallet = getWallet().pubkey;\n\n  const filters = [\n    {\n      memcmp: {\n        offset: SubscriptionPlanLayout.offsetOf('owner'),\n        bytes: wallet.toBase58(),\n      },\n    },\n    {\n      dataSize: SubscriptionPlanLayout.span,\n    },\n  ];\n\n  const unsafeRes = await connection._rpcRequest('getProgramAccounts', [\n    SOLLPAY_PROGRAM_ID,\n    {\n      commitment: connection.commitment,\n      filters,\n      encoding: 'base64',\n    },\n  ]);\n\n  const res = GetProgramAccountsRpcResult(unsafeRes);\n  if (res.error) {\n    throw new Error(\n      'failed to get accounts owned by program ' +\n        SOLLPAY_PROGRAM_ID +\n        ': ' +\n        res.error.message,\n    );\n  }\n\n  const { result } = res;\n  assert(typeof result !== 'undefined');\n\n  return result\n    .map((result: any) => {\n      assert(result.account.data[1] === 'base64');\n\n      const parsedData = parseSubscriptionPlanData(\n        Buffer.from(result.account.data[0], 'base64'),\n      );\n      if (!parsedData.isInitialized) {\n        return null;\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: parsedData,\n        },\n      };\n    })\n    .filter(complement(isNil));\n});\n","import assert from 'assert';\nimport { PublicKey } from '@solana/web3.js';\nimport { complement, isNil } from 'ramda';\nimport { getConnection } from 'api/connection';\nimport { getWallet } from 'api/wallet';\nimport { SOLLPAY_PROGRAM_ID } from 'constants/common';\nimport {\n  parseSubscriptionData,\n  SubscriptionLayout,\n} from 'lib/sollpay/layouts/subscription';\nimport { GetProgramAccountsRpcResult } from '../structs';\nimport { findSubscriptionsFx } from '..';\n\nfindSubscriptionsFx.use(async () => {\n  const connection = getConnection();\n  const wallet = getWallet().pubkey;\n\n  const filters = [\n    {\n      memcmp: {\n        offset: SubscriptionLayout.offsetOf('owner'),\n        bytes: wallet.toBase58(),\n      },\n    },\n    {\n      dataSize: SubscriptionLayout.span,\n    },\n  ];\n\n  const unsafeRes = await connection._rpcRequest('getProgramAccounts', [\n    SOLLPAY_PROGRAM_ID,\n    {\n      commitment: connection.commitment,\n      filters,\n      encoding: 'base64',\n    },\n  ]);\n\n  const res = GetProgramAccountsRpcResult(unsafeRes);\n  if (res.error) {\n    throw new Error(\n      'failed to get accounts owned by program ' +\n        SOLLPAY_PROGRAM_ID +\n        ': ' +\n        res.error.message,\n    );\n  }\n\n  const { result } = res;\n  assert(typeof result !== 'undefined');\n\n  return result\n    .map((result: any) => {\n      assert(result.account.data[1] === 'base64');\n\n      const parsedData = parseSubscriptionData(\n        Buffer.from(result.account.data[0], 'base64'),\n      );\n      if (!parsedData.isInitialized) {\n        return null;\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: parsedData,\n        },\n      };\n    })\n    .filter(complement(isNil));\n});\n","import React, { FC, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\n\nimport { HiOutlineSelector } from 'react-icons/hi';\n\nconst Wrapper = styled.div`\n  position: relative;\n`;\n\nconst SelectButton = styled.button`\n  display: flex;\n  align-items: center;\n\n  width: 100%;\n  min-height: 38px;\n  padding: 0 5px 0 11px;\n\n  font-size: 14px;\n  font-weight: 400;\n  text-align: left;\n\n  background: #fff;\n  border: 1px rgba(19, 45, 74, 0.12);\n  border-radius: 5px;\n  box-shadow: 0 0 0 1px rgb(19 45 74 / 12%), 0 2px 4px -2px rgb(0 0 0 / 20%);\n  transition: box-shadow 200ms cubic-bezier(0.64, 0, 0.35, 1) 0s;\n  outline: none;\n\n  &:hover {\n    box-shadow: 0 0 0 1px rgb(19 45 74 / 12%), 0 3px 6px -2px rgb(0 0 0 / 20%);\n  }\n`;\n\nconst Value = styled.div`\n  width: 100%;\n  margin-right: 2px;\n\n  color: #364a61;\n`;\n\nconst Placeholder = styled(Value)`\n  color: #96a3b3;\n`;\n\nconst SelectListContainer = styled.div`\n  position: absolute;\n  right: 0;\n  z-index: 1;\n\n  min-width: 100%;\n  margin-top: 8px;\n\n  background: #fff;\n  border: 1px rgba(19, 45, 74, 0.12);\n  border-radius: 5px;\n  box-shadow: rgba(19, 45, 74, 0.12) 0 0 0 1px,\n    rgba(0, 0, 0, 0.14) 0 7px 14px -4px;\n`;\n\nconst SelectList = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  padding: 6px 0;\n  max-height: 288px;\n\n  overflow-y: auto;\n`;\n\nconst SelectOptionText = styled.span`\n  color: #364a61;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n  letter-spacing: 0.36px;\n  white-space: nowrap;\n`;\n\nconst SelectOption = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n\n  min-height: 36px;\n  padding: 0 11px;\n\n  cursor: pointer;\n\n  &:hover {\n    background: #f7f9fc;\n  }\n\n  &.isSelected {\n    background: #f7f9fc;\n\n    ${SelectOptionText} {\n      font-weight: 500;\n    }\n  }\n`;\n\nexport type SelectValueType = string | number;\n\ninterface Props {\n  placeholder: string;\n  selected?: SelectValueType;\n  items: { title?: string; value: SelectValueType }[];\n  onChange: (nextValue: SelectValueType) => void;\n}\n\nexport const Select: FC<Props> = ({\n  placeholder,\n  selected,\n  items,\n  onChange,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<HTMLButtonElement>(null);\n  const selectListRef = useRef<HTMLDivElement>(null);\n\n  const handleAwayClick = (e: MouseEvent) => {\n    if (\n      !selectRef.current?.contains(e.target as HTMLButtonElement) &&\n      !selectListRef.current?.contains(e.target as HTMLDivElement)\n    ) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', handleAwayClick);\n\n    return () => {\n      window.removeEventListener('click', handleAwayClick);\n    };\n  }, []);\n\n  const selectedItem = useMemo(\n    () => items.find((item) => item.value === selected),\n    [selected, items],\n  );\n\n  const handleSelectClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOptionClick = (nextValue: SelectValueType) => () => {\n    onChange(nextValue);\n    setIsOpen(false);\n  };\n\n  return (\n    <Wrapper>\n      <SelectButton ref={selectRef} onClick={handleSelectClick}>\n        {selectedItem ? (\n          <Value>{selectedItem.title || selectedItem.value}</Value>\n        ) : (\n          <Placeholder>{placeholder}</Placeholder>\n        )}{' '}\n        <HiOutlineSelector size={20} color=\"#96A3B3\" />\n      </SelectButton>\n      {isOpen ? (\n        <SelectListContainer ref={selectListRef}>\n          <SelectList role=\"listbox\">\n            {items.map(({ title, value }) => (\n              <SelectOption\n                key={value || title}\n                role=\"option\"\n                onClick={handleOptionClick(value)}\n                className={classNames({ isSelected: value === selected })}\n              >\n                <SelectOptionText title={title || String(value)}>\n                  {title || value}\n                </SelectOptionText>\n              </SelectOption>\n            ))}\n          </SelectList>\n        </SelectListContainer>\n      ) : null}\n    </Wrapper>\n  );\n};\n","import { Account, PublicKey, Transaction } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\n\nimport { isDev, localPrivateKey } from 'config';\n\nimport { Wallet, WalletEvent } from './Wallet';\n\n/**\n * Test wallet implementation that uses a private key\n */\nexport class LocalWallet extends Wallet {\n  private account: Account;\n\n  constructor(network: string) {\n    super(network);\n    if (!isDev) {\n      throw new Error('LocalWallet can not be used in production');\n    }\n\n    if (!localPrivateKey) {\n      throw new Error('No local private key in the environment');\n    }\n\n    this.account = new Account(JSON.parse(localPrivateKey));\n\n    // simulate connecting to an external wallet;\n    setImmediate(() => this.emit(WalletEvent.CONNECT));\n  }\n\n  get pubkey(): PublicKey {\n    return this.account.publicKey;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  disconnect(): void {\n    // Nothing to do here\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const message = transaction.serializeMessage();\n    const signature = nacl.sign.detached(message, this.account.secretKey);\n    transaction.addSignature(this.account.publicKey, Buffer.from(signature));\n    return Promise.resolve(transaction);\n  }\n}\n","import { sendAndConfirmTransaction as realSendAndConfirmTransaction } from '@solana/web3.js';\nimport type {\n  Account,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nexport function sendAndConfirmTransaction(\n  title: string,\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return realSendAndConfirmTransaction(connection, transaction, signers, {\n    skipPreflight: false,\n    commitment: 'recent',\n    preflightCommitment: 'recent',\n  });\n}\n","// import { Connection } from '@solana/web3.js';\n// import { Wallet } from 'api/wallet/Wallet';\nimport { TOKENS } from '@solana/spl-token-registry';\nimport { WalletType } from 'api/wallet';\nimport { app } from '../app';\nimport { ExtendedCluster } from '../../types/custom';\n\nexport const connectFx = app.createEffect<void, string>();\n\nexport const disconnectFx = app.createEffect<void, void>();\n\nexport const changeCluster = app.createEvent<ExtendedCluster>();\n\nexport const $cluster = app.createStore<ExtendedCluster>('devnet');\n\nexport const clusterPersisted = app.createEvent<any>();\n\nexport const $type = app.createStore<WalletType>(WalletType.SOLLET);\n\nexport const $connected = app.createStore<boolean>(false);\n\nexport const $tokens = $cluster.map((cluster) => TOKENS[cluster] || []);\n\n// export const $connection = app.createStore<Connection | null>(null);\n//\n// export const $wallet = app.createStore<Wallet | null>(null);\n","import { createDomain } from 'effector';\nimport { createGate } from 'effector-react';\n\nexport const app = createDomain();\n\nexport const AppGate = createGate();\n","import {\n  AccountInfo,\n  ParsedAccountData,\n  PublicKey,\n  PublicKeyAndAccount,\n  RpcResponseAndContext,\n} from '@solana/web3.js';\nimport { Numberu64 } from '@solana/spl-token-swap';\nimport { app } from '../app';\nimport { ISubscriptionPlanRecord, ISubscriptionRecord } from './types';\n\nexport const getParsedTokenAccountsByOwnerFx = app.createEffect<\n  {\n    token?: PublicKey;\n  },\n  RpcResponseAndContext<\n    { pubkey: PublicKey; account: AccountInfo<ParsedAccountData> }[]\n  >\n>();\n\nexport const createSubscriptionPlanFx = app.createEffect<\n  {\n    token: PublicKey;\n    subscriptionTimeframe: number;\n    maxAmount: number;\n  },\n  string\n>();\n\nexport const findSubscriptionPlansFx = app.createEffect<\n  void,\n  PublicKeyAndAccount<ISubscriptionPlanRecord>[]\n>();\n\nexport const findSubscriptionPlanFx = app.createEffect<\n  { planAddress: PublicKey },\n  AccountInfo<ISubscriptionPlanRecord> | null\n>();\n\nexport const findSubscriptionsFx = app.createEffect<\n  void,\n  PublicKeyAndAccount<ISubscriptionRecord>[]\n>();\n\nexport const createSubscriptionFx = app.createEffect<\n  {\n    subscriptionPlanAddress: PublicKey;\n    tokenAddress: PublicKey;\n    subscriptionTimeframe: number | Numberu64;\n    maxAmount: number | Numberu64;\n  },\n  string\n>();\n","import React, { FC, HTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n\n  background: #fff;\n  border: 1px solid #eaeaea;\n  border-radius: 8px;\n`;\n\nexport const Card: FC<HTMLAttributes<HTMLDivElement>> = ({\n  children,\n  style,\n  className,\n}) => {\n  return (\n    <Wrapper style={style} className={className}>\n      {children}\n    </Wrapper>\n  );\n};\n","import { combine, forward, guard, merge } from 'effector';\nimport { createGate } from 'effector-react';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\n\nimport { app } from 'models/app';\nimport {\n  createSubscriptionFx,\n  findSubscriptionPlanFx,\n  getParsedTokenAccountsByOwnerFx,\n} from 'models/connection';\nimport { ISubscriptionPlanRecord } from 'models/connection/types';\nimport { $connected, $tokens } from 'models/wallet';\n\nexport const SubscribeGate = createGate<{ planAddress: PublicKey }>();\n\nexport const $subscriptionPlan = app.createStore<AccountInfo<ISubscriptionPlanRecord> | null>(\n  null,\n);\n\nexport const $store = combine({\n  connected: $connected,\n  subscriptionPlan: $subscriptionPlan,\n  tokens: $tokens,\n  isLoading: findSubscriptionPlanFx.pending,\n  isSubscribing: createSubscriptionFx.pending,\n  isFetching: combine(\n    findSubscriptionPlanFx.pending,\n    createSubscriptionFx.pending,\n    (one, two) => one || two,\n  ),\n});\n\nforward({\n  from: SubscribeGate.open,\n  to: findSubscriptionPlanFx,\n});\n\nguard({\n  source: $subscriptionPlan.map((subscriptionPlan) => ({\n    token: subscriptionPlan?.data.token,\n  })),\n  clock: $connected,\n  filter: ({ token }, connected) => Boolean(token) && connected,\n  target: getParsedTokenAccountsByOwnerFx,\n});\n\n$subscriptionPlan.on(\n  findSubscriptionPlanFx.doneData,\n  (_, subscriptionPlan) => subscriptionPlan,\n);\n","import React, { FC, useMemo } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { useGate, useStore } from 'effector-react';\nimport { PublicKey } from '@solana/web3.js';\n\nimport classNames from 'classnames';\nimport { Button } from 'components/ui/Button';\nimport { createSubscriptionFx } from 'models/connection';\nimport { connectFx } from 'models/wallet';\nimport { Card } from '../Card';\nimport { $store, SubscribeGate } from './model';\nimport rocketImg from './rocket.png';\nimport bgImg from './bg.png';\n\nconst WrapperCard = styled(Card)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  min-width: 230px;\n\n  background-image: url('${bgImg}');\n  background-repeat: no-repeat;\n  background-position: bottom center;\n  background-size: contain;\n`;\n\nconst Title = styled.div`\n  //margin-bottom: 20px;\n\n  color: #000;\n  font-size: 24px;\n  letter-spacing: -0.47px;\n  font-weight: 600;\n  line-height: 1.5;\n`;\n\nconst Rocket = styled.div`\n  @keyframes fly {\n    0% {\n      transform: rotate(5deg);\n    }\n    50% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(5deg);\n    }\n  }\n\n  width: 50px;\n  height: 60px;\n  margin: 10px;\n\n  background: url('${rocketImg}') no-repeat 50% 50%;\n  background-size: 50px 60px;\n\n  &.isFetching {\n    animation: fly 0.5s linear infinite;\n  }\n`;\n\nconst Group = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 40px;\n  padding: 0 12px;\n\n  color: #666;\n  font-size: 14px;\n  font-weight: 400;\n\n  background: #fafafa;\n  border-radius: 5px;\n  border: 1px solid #eaeaea;\n\n  &.isDisabled {\n    visibility: hidden;\n  }\n`;\n\nconst Price = styled.div`\n  margin-right: 10px;\n\n  font-weight: 600;\n`;\n\nconst SubscribeButton = styled(Button)`\n  margin-top: 20px;\n\n  width: 100%;\n`;\n\ninterface Props {\n  planAddress: string;\n}\n\nexport const Subscribe: FC<Props> = ({ planAddress }) => {\n  useGate(SubscribeGate, { planAddress: new PublicKey(planAddress) });\n  const {\n    connected,\n    subscriptionPlan,\n    tokens,\n    isLoading,\n    isSubscribing,\n    isFetching,\n  } = useStore($store);\n\n  const token = useMemo(\n    () =>\n      tokens.find(\n        (token) =>\n          token.mintAddress === subscriptionPlan?.data.token.toBase58(),\n      ),\n    [tokens, subscriptionPlan],\n  );\n\n  const handleSubscribeClick = async () => {\n    if (!subscriptionPlan) {\n      return;\n    }\n\n    if (!connected) {\n      await connectFx();\n    }\n\n    // TODO: !!!\n    createSubscriptionFx({\n      subscriptionPlanAddress: new PublicKey(planAddress),\n      tokenAddress: subscriptionPlan.data.token,\n      subscriptionTimeframe: subscriptionPlan.data.subscriptionTimeframe.toNumber(),\n      maxAmount: subscriptionPlan.data.maxAmount.toNumber(),\n    });\n  };\n\n  const renderSubscriptionTimeframe = (subscriptionTimeframe: number) => {\n    switch (subscriptionTimeframe) {\n      case 1:\n        return 'daily';\n      case 7:\n        return 'weekly';\n      case 30:\n        return 'monthly';\n      case 365:\n        return 'yearly';\n      default:\n        return subscriptionTimeframe;\n    }\n  };\n\n  const renderButtonText = () => {\n    if (isLoading) {\n      return 'Loading...';\n    }\n    if (isSubscribing) {\n      return 'Subscribing...';\n    }\n    if (connected) {\n      return 'Subscribe';\n    }\n    return 'Connect and Subscribe';\n  };\n\n  const isDisabled = !subscriptionPlan || isFetching;\n\n  return (\n    <WrapperCard>\n      <Title>Payment</Title>\n      <Rocket className={classNames({ isFetching })} />\n      <Group className={classNames({ isDisabled })}>\n        {subscriptionPlan ? (\n          <>\n            <Price>\n              {subscriptionPlan.data.maxAmount.toNumber()}{' '}\n              {token?.tokenSymbol || subscriptionPlan.data.token.toBase58()}{' '}\n            </Price>\n            {renderSubscriptionTimeframe(\n              subscriptionPlan.data.subscriptionTimeframe.toNumber(),\n            )}\n          </>\n        ) : null}\n      </Group>\n      <SubscribeButton onClick={handleSubscribeClick} disabled={isDisabled}>\n        {renderButtonText()}\n      </SubscribeButton>\n    </WrapperCard>\n  );\n};\n","import React from 'react';\nimport { useStore } from 'effector-react';\nimport { styled } from '@linaria/react';\nimport { $connected } from 'models/wallet';\nimport { Button } from 'components/ui/Button';\nimport { Header } from 'components/common/Header';\nimport { Subscribe } from 'components/common/Subscribe';\nimport { MainContainer } from '../../components/common/MainContainer';\nimport { connectAndCreateClicked } from './model';\n\nconst Wrapper = styled.div`\n  min-height: 100%;\n  padding-bottom: 50px;\n\n  background: #fbfbfd;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  max-width: 1280px;\n  margin: 0 auto;\n\n  text-align: center;\n`;\n\nconst Hero = styled.div`\n  padding: 120px 0 30px;\n`;\n\nconst Title = styled.h1`\n  margin: 0 0 30px;\n\n  color: #111;\n  font-size: 90px;\n  font-weight: 800;\n  line-height: 1;\n  letter-spacing: -0.05em;\n`;\n\nconst Description = styled.h3`\n  margin: 0 0 40px;\n\n  color: #666;\n  font-size: 20px;\n  font-weight: 400;\n  line-height: 1.6;\n  letter-spacing: -0.02em;\n`;\n\nconst ButtonStyled = styled(Button)`\n  height: 48px;\n  padding: 0 56px;\n\n  box-shadow: 0 4px 14px 0 rgb(0 118 255 / 39%);\n`;\n\nexport const Home = () => {\n  const connected = useStore($connected);\n\n  return (\n    <Wrapper>\n      <Header showConnect />\n      <MainContainer>\n        <Container>\n          <Hero>\n            <Title>\n              The Recurring Payments <br /> for Solana\n            </Title>\n            <Description>\n              SollPay gives you the experience to accept recurring payments in\n              wrapped tokens by 100% non-custodial way\n            </Description>\n            <ButtonStyled onClick={connectAndCreateClicked}>\n              {connected ? 'Sign In' : 'Connect and Sign In'}\n            </ButtonStyled>\n          </Hero>\n          <Subscribe planAddress=\"AZimfvZJuMEEVfxantkPDvUHAjY8trsoVFFkSobBkFvv\" />\n        </Container>\n      </MainContainer>\n    </Wrapper>\n  );\n};\n","import React from 'react';\n\nexport const NotFound = () => <div>Page not found</div>;\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { Link } from 'react-router-dom';\nimport { Header } from 'components/common/Header';\nimport { Card } from 'components/common/Card';\nimport leftImg from './left.png';\nimport rightImg from './right.png';\n\nconst Wrapper = styled.div`\n  height: 100%;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin: 48px auto 0;\n`;\n\nconst CardStyled = styled(Card)`\n  display: flex;\n\n  width: 800px;\n  min-height: 400px;\n`;\n\nconst ColumnLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n\n  &:hover {\n  }\n`;\n\nconst LeftColumnLink = styled(ColumnLink)``;\n\nconst LeftPic = styled.div`\n  width: 194px;\n  height: 200px;\n\n  background: url('${leftImg}') no-repeat 50% 50%;\n  background-size: 194px 200px;\n`;\n\nconst Delimiter = styled.div`\n  width: 1px;\n\n  background: #eaeaea;\n`;\n\nconst RightColumnLink = styled(ColumnLink)``;\n\nconst RightPic = styled.div`\n  width: 209px;\n  height: 200px;\n\n  background: url('${rightImg}') no-repeat 50% 50%;\n  background-size: 209px 200px;\n`;\n\nconst Title = styled.div`\n  margin-top: 24px;\n\n  color: #000;\n  font-size: 24px;\n  letter-spacing: -0.47px;\n  font-weight: 600;\n  line-height: 1.5;\n`;\n\nconst Description = styled.div`\n  margin: 24px 0;\n  color: #666;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 1.6;\n`;\n\nexport const Select: FC = () => {\n  return (\n    <Wrapper>\n      <Header />\n      <Container>\n        <CardStyled>\n          <LeftColumnLink to=\"/user\">\n            <LeftPic />\n            <Title>User</Title>\n            <Description>Manage your subscriptions</Description>\n          </LeftColumnLink>\n          <Delimiter />\n          <RightColumnLink to=\"/customer\">\n            <RightPic />\n            <Title>Customer</Title>\n            <Description>Manage your subscribers</Description>\n          </RightColumnLink>\n        </CardStyled>\n      </Container>\n    </Wrapper>\n  );\n};\n","import React, { lazy, useMemo } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { renderRoutes, RouteConfig } from 'react-router-config';\n\nimport { useStore } from 'effector-react';\n\nimport { Home } from 'pages/home';\nimport { NotFound } from 'pages/notFound';\nimport { Select } from 'pages/select';\nimport { $connected } from 'models/wallet';\n\nexport const makeRoutes = (isAuth: boolean): RouteConfig[] =>\n  [\n    {\n      path: '/',\n      exact: true,\n      component: Home,\n    },\n    {\n      path: `/select`,\n      exact: true,\n      needAuth: true,\n      component: Select,\n    },\n    {\n      path: `/customer`,\n      exact: true,\n      needAuth: true,\n      component: () => <Redirect to=\"/customer/subscriptions\" />,\n    },\n    {\n      path: `/customer/plans`,\n      exact: true,\n      needAuth: true,\n      component: lazy(() => import('pages/customer/plans')),\n    },\n    {\n      path: `/customer/subscriptions`,\n      exact: true,\n      needAuth: true,\n      component: lazy(() => import('pages/customer/subscriptions')),\n    },\n    {\n      path: `/user`,\n      exact: true,\n      needAuth: true,\n      component: () => <Redirect to=\"/user/subscriptions\" />,\n    },\n    {\n      path: `/user/subscriptions`,\n      exact: true,\n      needAuth: true,\n      component: lazy(() => import('pages/user/subscriptions')),\n    },\n    {\n      path: '*',\n      component: NotFound,\n    },\n  ].map((route) => {\n    if (route.needAuth && route.needAuth !== isAuth) {\n      route.component = () => <Redirect to=\"/\" />;\n      return route;\n    }\n\n    return route;\n  });\n\nexport const Pages = () => {\n  // TODO: Cannot update a component (`Pages`) while rendering a different component\n  const connected = useStore($connected);\n\n  return useMemo(() => renderRoutes(makeRoutes(connected)), [connected]);\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  createRef,\n  FC,\n  lazy,\n  LazyExoticComponent,\n  RefObject,\n  Suspense,\n  useState,\n} from 'react';\n\nimport { styled } from '@linaria/react';\nimport { last } from 'ramda';\nimport { useStore } from 'effector-react';\nimport { ModalComponentType, ModalState } from 'models/modals/types';\nimport { $modals, closeModalFx } from 'models/modals';\nimport { MODAL_PLAN } from './constants';\n\nconst Wrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 30;\n\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst ModalContainer = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1;\n\n  overflow-y: auto;\n  overscroll-behavior: none;\n\n  /* Above background */\n  &:last-child {\n    z-index: 2;\n  }\n`;\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100%;\n  padding: 10px 0;\n`;\n\nconst ModalBackground = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 2;\n\n  background-color: rgba(0, 0, 0, 0.6);\n\n  user-select: none;\n`;\n\nconst modalsMap = new Map<string, LazyExoticComponent<any>>([\n  [MODAL_PLAN, lazy(() => import('components/modals/Plan'))],\n]);\n\nexport const ModalManager: FC = () => {\n  const [modalsRefs, setModalsRefs] = useState<{\n    [modalId: string]: RefObject<ModalComponentType>;\n  }>({});\n  const modals = useStore($modals);\n\n  const closeTopModal = async () => {\n    const modal = last(modals);\n    if (!modal) {\n      return;\n    }\n\n    const { modalId } = modal;\n\n    const modalRef = modalsRefs[modalId];\n    if (modalRef.current?.canClose && !(await modalRef.current.canClose())) {\n      return;\n    }\n\n    closeModalFx({ modalId });\n  };\n\n  const handleWrapperClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // handle click only on element\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    closeTopModal();\n  };\n\n  const getReadyDialogs = () => {\n    const dialogs: (ModalState & {\n      ModalComponent: LazyExoticComponent<any>;\n    })[] = [];\n\n    for (const { modalType, modalId, props } of modals) {\n      const ModalComponent = modalsMap.get(modalType);\n      if (ModalComponent) {\n        dialogs.push({\n          modalType,\n          modalId,\n          props,\n          ModalComponent,\n        });\n      }\n    }\n\n    return dialogs;\n  };\n\n  const dialogsInfo = getReadyDialogs();\n\n  const dialogs = dialogsInfo.map(({ modalId, props, ModalComponent }) => {\n    let modalRef = modalsRefs[modalId];\n\n    if (!modalRef) {\n      modalRef = createRef();\n      setModalsRefs((state) => ({\n        ...state,\n        [modalId]: modalRef,\n      }));\n    }\n\n    return (\n      <Suspense fallback={null} key={modalId}>\n        <ModalContainer>\n          <ModalWrapper onClick={handleWrapperClick}>\n            <ModalComponent\n              {...props}\n              modalId={modalId}\n              modalRef={modalRef}\n              close={(result: any) => closeModalFx({ modalId, result })}\n            />\n          </ModalWrapper>\n        </ModalContainer>\n      </Suspense>\n    );\n  });\n\n  if (dialogs.length > 0) {\n    return (\n      <Wrapper>\n        <ModalBackground />\n        {dialogs}\n      </Wrapper>\n    );\n  }\n\n  return null;\n};\n","import React, { Suspense } from 'react';\nimport { Router } from 'react-router';\nimport { useGate } from 'effector-react';\n\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { AppGate } from 'models/app';\nimport { history } from 'lib/routing';\nimport { Pages } from './routes';\nimport { ModalManager } from './components/common/ModalManager';\n\ndayjs.extend(relativeTime);\ndayjs.extend(localizedFormat);\n\nexport const App: React.FC = () => {\n  useGate(AppGate);\n\n  return (\n    <>\n      <Router history={history}>\n        <Suspense fallback={null}>\n          <Pages />\n        </Suspense>\n      </Router>\n      <ModalManager />\n    </>\n  );\n};\n","import { $connected, changeCluster } from '../wallet';\nimport { app } from './index';\n\napp.onCreateStore((newStore) => {\n  // Change cluster reset all store exclude $connected because of route pass user to home page\n  if (newStore !== $connected) {\n    newStore.reset(changeCluster);\n  }\n});\n\napp.onCreateEffect((newEffect) => {\n  newEffect.failData.watch((payload) => console.error(payload));\n});\n","import {\n  Account,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { Numberu64 } from '@solana/spl-token-swap';\nimport * as BufferLayout from 'buffer-layout';\n\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SOLLPAY_FEE_ACCOUNT, SOLLPAY_PROGRAM_ID } from 'constants/common';\nimport { getWallet, makeTransaction, sendTransaction } from 'api/wallet';\nimport { getConnection } from 'api/connection';\nimport { SollPay } from 'lib/sollpay';\nimport { SubscriptionPlanLayout } from 'lib/sollpay/layouts/subscriptionPlan';\nimport { createSubscriptionPlanFx } from '..';\n\ncreateSubscriptionPlanFx.use(\n  async ({ token, subscriptionTimeframe, maxAmount }) => {\n    const connection = getConnection();\n    const wallet = getWallet().pubkey;\n    const subscriptionPlanAccount = new Account();\n\n    const [authority, nonce] = await PublicKey.findProgramAddress(\n      [subscriptionPlanAccount.publicKey.toBuffer()],\n      SOLLPAY_PROGRAM_ID,\n    );\n\n    const instructions: TransactionInstruction[] = [];\n\n    // Allocate memory for the account\n    const balanceNeeded = await SollPay.getMinBalanceRentForExemptSubscriptionPlan(\n      connection,\n    );\n\n    instructions.push(\n      SystemProgram.createAccount({\n        fromPubkey: wallet,\n        newAccountPubkey: subscriptionPlanAccount.publicKey,\n        lamports: balanceNeeded,\n        space: SubscriptionPlanLayout.span,\n        programId: SOLLPAY_PROGRAM_ID,\n      }),\n    );\n\n    instructions.push(\n      SollPay.createSubscriptionPlanInstruction(\n        subscriptionPlanAccount,\n        authority,\n        token,\n        SOLLPAY_FEE_ACCOUNT,\n        TOKEN_PROGRAM_ID,\n        SOLLPAY_PROGRAM_ID,\n        nonce,\n        wallet,\n        subscriptionTimeframe,\n        maxAmount,\n      ),\n    );\n\n    const transaction = await makeTransaction(instructions, [\n      subscriptionPlanAccount,\n    ]);\n    return sendTransaction(transaction);\n  },\n);\n","import { getConnection } from 'api/connection';\nimport { parseSubscriptionPlanData } from 'lib/sollpay/layouts/subscriptionPlan';\nimport { findSubscriptionPlanFx } from '..';\n\nfindSubscriptionPlanFx.use(async ({ planAddress }) => {\n  const connection = getConnection();\n  const info = await connection.getAccountInfo(planAddress);\n  if (!info) {\n    return null;\n  }\n\n  return {\n    ...info,\n    data: parseSubscriptionPlanData(info.data),\n  };\n});\n","import { TOKEN_PROGRAM_ID, AccountInfo } from '@solana/spl-token';\nimport { getConnection } from 'api/connection';\nimport { getWallet } from 'api/wallet';\nimport { getParsedTokenAccountsByOwnerFx } from '..';\n\ngetParsedTokenAccountsByOwnerFx.use(async ({ token }) => {\n  const connection = getConnection();\n  const wallet = getWallet().pubkey;\n\n  const result = await connection.getParsedTokenAccountsByOwner(wallet, {\n    programId: TOKEN_PROGRAM_ID,\n    mint: token,\n  });\n  console.log(111, result);\n\n  return result;\n});\n","import { forward } from 'effector';\nimport { persist } from 'effector-storage/local';\nimport * as WalletAPI from 'api/wallet';\nimport { WalletEvent } from 'api/wallet/Wallet';\n\nimport {\n  $cluster,\n  $connected,\n  $type,\n  changeCluster,\n  connectFx,\n  disconnectFx,\n} from '.';\n\nconnectFx.use(async () => {\n  const cluster = $cluster.getState();\n  const type = $type.getState();\n  const wallet = await WalletAPI.connect(cluster, type);\n\n  wallet.on(WalletEvent.DISCONNECT, () => {\n    disconnectFx();\n    console.error('Wallet disconnected');\n  });\n\n  wallet.on(WalletEvent.CONFIRMED, ({ transactionSignature }) =>\n    console.info(`Confirmed: ${transactionSignature}`),\n  );\n\n  console.info('Wallet connected');\n\n  return wallet.pubkey.toBase58();\n});\n\ndisconnectFx.use(() => {\n  WalletAPI.disconnect();\n  console.error('Wallet disconnected');\n});\n\n$cluster.on(changeCluster, (_, cluster) => cluster);\n\n$connected.on(connectFx.done, () => true).on(disconnectFx, () => false);\n\nforward({\n  from: changeCluster,\n  to: [connectFx],\n});\n\npersist({\n  store: $cluster,\n  key: 'cluster',\n});\n","import { closeModal, $modals, closeModalFx, openModalFx, openModal } from '.';\n\nconst promises = new Map();\nlet modalId = 0;\n\ncloseModalFx.use(({ modalId, result }): void => {\n  if (!modalId) {\n    throw new Error('Trying to hide modal without modalId');\n  }\n\n  const dialogInfo = promises.get(modalId);\n\n  if (dialogInfo) {\n    dialogInfo.resolve(result);\n    promises.delete(modalId);\n  }\n\n  closeModal({ modalId });\n});\n\nopenModalFx.use(\n  ({ modalType, props }): Promise<unknown> => {\n    const modals = $modals.getState();\n\n    if (modals.some((modal) => modal.modalType === modalType)) {\n      // TODO: custom type of Error\n      throw new Error(`Dublicate of modal ${modalType}`);\n    }\n\n    modalId = ++modalId;\n\n    openModal({ modalType, modalId, props });\n\n    const promise = new Promise((resolve) => {\n      promises.set(modalId, {\n        modalId,\n        resolve,\n      });\n    });\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    promise.modalId = modalId;\n\n    return promise;\n  },\n);\n\n$modals\n  .on(closeModal, (state, payload) =>\n    state.filter((dialog) => dialog.modalId !== payload.modalId),\n  )\n  .on(openModal, (state, payload) => state.concat(payload));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createInspector } from 'effector-logger/inspector';\n\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\nimport './models/init';\nimport { css } from '@linaria/core';\nimport { ress } from './styles/ress';\n\ncreateInspector();\n\nexport const globals = css`\n  :global() {\n    ${ress}\n\n    html,\n    body,\n    #root {\n      min-height: 0;\n    }\n\n    body {\n      font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI',\n        'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n        'Helvetica Neue', sans-serif;\n      font-feature-settings: 'kern';\n      text-rendering: optimizeLegibility;\n      -webkit-font-smoothing: antialiased;\n    }\n\n    a {\n      text-decoration: none;\n      color: inherit;\n    }\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property = 'publicKey'): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n","import {\n  Account,\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  TransactionInstructionCtorFields,\n} from '@solana/web3.js';\n\nimport { postTransactionSleepMS } from 'config';\nimport { sleep } from 'utils/common';\n\nimport { ExtendedCluster } from 'types/custom';\nimport {\n  confirmTransaction,\n  DEFAULT_COMMITMENT,\n  getConnection,\n  getNetwork,\n} from '../connection';\nimport { LocalWallet } from './LocalWallet';\nimport { SolletWallet } from './SolletWallet';\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst POST_TRANSACTION_SLEEP_MS = postTransactionSleepMS || 500;\n\n/**\n * API for connecting to and interacting with a wallet\n */\n\n// singleton wallet for the app.\n// A user can be connected to only one wallet at a time.\nlet wallet: Wallet | null;\nlet connection: Connection | null;\n\nconst ERROR_CONNECT_FIRST = 'Connect first';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletType {\n  MANUAL,\n  SOLLET,\n  BONFIDA,\n  LOCAL,\n}\n\nconst createWallet = (type: WalletType, cluster: ExtendedCluster): Wallet => {\n  const network = getNetwork(cluster);\n  switch (type) {\n    case WalletType.LOCAL:\n      return new LocalWallet(network);\n    case WalletType.SOLLET:\n      return new SolletWallet(network);\n    case WalletType.BONFIDA:\n      return new SolletWallet(network, 'https://bonfida.com/wallet');\n    default:\n      return new SolletWallet(network);\n  }\n};\n\nexport const connect = async (\n  cluster: ExtendedCluster,\n  type: WalletType,\n): Promise<Wallet> => {\n  const newWallet = createWallet(type, cluster);\n\n  // assign the singleton wallet.\n  // Using a separate variable to simplify the type definitions\n  wallet = newWallet;\n  connection = getConnection(cluster);\n\n  // connect is done once the wallet reports that it is connected.\n  return new Promise((resolve) => {\n    newWallet.on(WalletEvent.CONNECT, () => resolve(newWallet));\n  });\n};\n\nexport const disconnect = (): void => wallet?.disconnect();\n\nexport const makeTransaction = async (\n  instructions: (TransactionInstruction | TransactionInstructionCtorFields)[],\n  signers: Account[] = [],\n): Promise<Transaction> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  const { blockhash: recentBlockhash } = await connection.getRecentBlockhash();\n\n  const signatures = [{ publicKey: wallet.pubkey }, ...signers];\n  const transaction = new Transaction({\n    recentBlockhash,\n    signatures,\n  });\n  transaction.add(...instructions);\n\n  // if there are any cosigners (other than the current wallet)\n  // sign the transaction\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  return transaction;\n};\n\ninterface SendOptions {\n  commitment: Commitment;\n  preflightCommitment: Commitment;\n}\n\nconst defaultSendOptions = {\n  commitment: DEFAULT_COMMITMENT,\n  preflightCommitment: DEFAULT_COMMITMENT,\n};\n\nasync function awaitConfirmation(\n  signature: string,\n  commitment: 'max' | 'recent' | 'root' | 'single' | 'singleGossip' | undefined,\n) {\n  console.log(`Submitted transaction ${signature}, awaiting confirmation`);\n  await confirmTransaction(signature, commitment);\n  console.log(`Transaction ${signature} confirmed`);\n\n  if (wallet) {\n    wallet.emit(WalletEvent.CONFIRMED, { transactionSignature: signature });\n  }\n\n  // workaround for a known solana web3 bug where\n  // the state obtained from the http endpoint and the websocket are out of sync\n  await sleep(POST_TRANSACTION_SLEEP_MS);\n  return signature;\n}\n\nexport const sendTransaction = async (\n  transaction: Transaction,\n  {\n    commitment = defaultSendOptions.commitment,\n    preflightCommitment = defaultSendOptions.preflightCommitment,\n  }: Partial<SendOptions> = defaultSendOptions,\n): Promise<string> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  console.log('Sending signature request to wallet');\n  const signed = await wallet.sign(transaction);\n  console.log('Got signature, submitting transaction');\n  const signature = await connection.sendRawTransaction(signed.serialize(), {\n    preflightCommitment,\n  });\n\n  return awaitConfirmation(signature, commitment);\n};\n\nexport const getWallet = (): Wallet => {\n  if (!wallet || !connection) {\n    throw new Error('notification.error.noWallet');\n  }\n\n  return wallet;\n};\n\nexport const getBalance = (publicKey: PublicKey): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getBalance(publicKey);\n};\n\nexport const getMinimumBalanceForRentExemption = (\n  length: number,\n): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getMinimumBalanceForRentExemption(length);\n};\n","import SolletWalletAdapter from '@project-serum/sol-wallet-adapter';\nimport { PublicKey, Transaction } from '@solana/web3.js';\n\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst DEFAULT_PROVIDER = 'https://www.sollet.io';\n\n/**\n * Wallet implementation for the sollet.io wallet.\n * It opens a popup browser window that prompts a user\n * to create and connect a simple web wallet.\n */\nexport class SolletWallet extends Wallet {\n  private solletWallet: SolletWalletAdapter;\n\n  constructor(network: string, provider: string = DEFAULT_PROVIDER) {\n    super(network);\n    this.solletWallet = new SolletWalletAdapter(provider, network);\n\n    // once the sollet wallet emits a connect or disconnect event, pass it on\n    this.solletWallet.on(WalletEvent.CONNECT, () => this.emit(WalletEvent.CONNECT));\n    this.solletWallet.on(WalletEvent.DISCONNECT, () => this.emit(WalletEvent.DISCONNECT));\n\n    void this.solletWallet.connect();\n  }\n\n  get pubkey(): PublicKey {\n    return this.solletWallet.publicKey;\n  }\n\n  disconnect(): void {\n    this.solletWallet.disconnect();\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.solletWallet.signTransaction(transaction);\n  }\n}\n","import {\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  SignatureResult,\n} from '@solana/web3.js';\nimport { identity, memoizeWith } from 'ramda';\n\nimport { ExtendedCluster } from 'types/custom';\nimport { defaultCommitment } from 'config';\n\nimport { retryableProxy } from './utils/retryableProxy';\n\nexport const LOCALNET_URL = 'http://localhost:8899';\n// const TICK = 5000;\n\n// The default time to wait when confirming a transaction.\nexport const DEFAULT_COMMITMENT: Commitment = defaultCommitment;\n\nlet currentCluster: ExtendedCluster;\n\n// Since connection objects include state, we memoise them here per network\nconst createConnection = memoizeWith<(network: string) => Connection>(\n  identity,\n  (network) => {\n    const connection = new Connection(network, DEFAULT_COMMITMENT);\n\n    // Due to an issue with the solana back-end relating to CORS headers on 429 responses\n    // Rate-limiting responses are not retried correctly. Adding this proxy fixes this.\n    const proxiedFunctions = [\n      'getBalance',\n      'getAccountInfo',\n      'getParsedAccountInfo',\n      'getParsedProgramAccounts',\n      'getParsedTokenAccountsByOwner',\n      'getRecentBlockhash',\n      'sendTransaction',\n      'sendRawTransaction',\n      'requestAirdrop',\n    ];\n    proxiedFunctions.forEach((fnName) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      connection[fnName] = retryableProxy(connection[fnName]);\n    });\n\n    return connection;\n  },\n);\n\nexport const getNetwork = (cluster: ExtendedCluster): string => {\n  if (cluster === 'localnet') {\n    return LOCALNET_URL;\n  }\n\n  if (cluster === 'mainnet-beta') {\n    return 'https://solana-api.projectserum.com/';\n  }\n\n  return clusterApiUrl(cluster);\n};\n\nexport const getConnection = (cluster?: ExtendedCluster): Connection => {\n  if (cluster) {\n    currentCluster = cluster;\n  }\n\n  const selectedCluster = cluster || currentCluster;\n\n  const network = getNetwork(selectedCluster);\n  return createConnection(network);\n};\n\nexport const confirmTransaction = (\n  signature: string,\n  commitment?: Commitment,\n): Promise<SignatureResult> => {\n  const connection = getConnection();\n  const confirmViaSocket = new Promise<SignatureResult>((resolve) =>\n    connection.onSignature(signature, (signatureResult) => {\n      console.log('Confirmation via socket:', signatureResult);\n      resolve(signatureResult);\n    }),\n  );\n\n  const confirmViaHttp = connection\n    .confirmTransaction(signature, commitment || DEFAULT_COMMITMENT)\n    .then((signatureResult) => {\n      console.log('Confirmation via http:', signatureResult);\n      return signatureResult.value;\n    });\n\n  return Promise.race([confirmViaHttp, confirmViaSocket]);\n};\n\n// type EpochCallback = (epochInfo: EpochInfo) => void;\n// export const listenToEpoch = (cluster: ExtendedCluster, callback: EpochCallback): void => {\n//   const connection = getConnection();\n//\n//   setInterval(() => {\n//     connection.getEpochInfo(DEFAULT_COMMITMENT).then(callback);\n//   }, TICK);\n// };\n","import { mergeLeft } from 'ramda';\n\nimport { sleep } from 'utils/common';\n\ninterface RetryOptions {\n  count: number;\n  intervalMS: number;\n  backoutMultiplier: number;\n}\n\nconst defaultRetryOptions: RetryOptions = {\n  // max number of retries\n  count: 5,\n  intervalMS: 200,\n  // every retry, multiply the interval by this amount\n  backoutMultiplier: 1.5,\n};\n\ninterface GenericAsyncFunction<U, R> {\n  (...args: Array<U>): Promise<R>;\n}\n\n/**\n * Creates a Proxy wraps the function in a retry function.\n * This should be only used if the function is idempotent, i.e. retrying should\n * return the same value and have no side-effects.\n *\n * @param fn\n * @param retryOptions\n */\nexport const retryableProxy = <U, R>(\n  fn: GenericAsyncFunction<U, R>,\n  retryOptions: Partial<RetryOptions> = defaultRetryOptions,\n): GenericAsyncFunction<U, R> => {\n  // combine the passed in options with default options\n  const options = mergeLeft(retryOptions, defaultRetryOptions);\n\n  const retryReducer = <T>(\n    target: GenericAsyncFunction<U, T>,\n    thisArg: unknown,\n    argArray: Array<U>,\n  ) => async (\n    previousValue: Promise<T>,\n    currentValue: Promise<T>,\n    currentIndex: number,\n  ): Promise<T> => {\n    // eslint-disable-next-line unicorn/consistent-function-scoping\n    const call = async () => target.apply(thisArg, argArray);\n\n    // if it hasn't been called yet, call the function\n    if (!previousValue) {\n      return call();\n    }\n\n    //  if it has been called, and failed, catch the error, wait and retry\n    return previousValue.catch((error) => {\n      const sleepMs =\n        options.intervalMS * options.backoutMultiplier ** currentIndex;\n      console.error(error);\n      console.log(\n        `Retrying after ${sleepMs}ms. (Retried ${currentIndex} times)`,\n      );\n\n      return sleep(sleepMs).then(call);\n    });\n  };\n\n  return new Proxy(fn, {\n    // trap the \"apply\" call to the proxied function,\n    // in other words, trap the function call itself\n    apply: (target, thisArg, argArray) => {\n      // reduce over the maximum number of retries.\n      // if any of them pass, the code will short-circuit and skip the rest\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      return [...new Array(options.count)]\n        .reduce(retryReducer(target, thisArg, argArray))\n        .catch((error: Error) => {\n          console.error('No more retries, throwing.');\n          throw error;\n        });\n    },\n  });\n};\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletEvent {\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  SIGNED = 'signed',\n  CONFIRMED = 'confirmed',\n}\n\n/**\n * Abstract wallet implementation. Any wallet connection,\n * e.g. browser extension, hardware wallet, web wallet etc,\n * is a separate implementation of this.\n */\nexport abstract class Wallet extends EventEmitter {\n  private network: string;\n\n  protected constructor(network: string) {\n    super();\n    this.network = network;\n  }\n\n  abstract get pubkey(): PublicKey;\n\n  abstract disconnect(): void;\n\n  /**\n   * Sign the transaction, and emit a \"signed\" event\n   * @param transaction\n   */\n  async sign(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = await this.signTransaction(transaction);\n    this.emit(WalletEvent.SIGNED, { transaction: signedTransaction });\n\n    return signedTransaction;\n  }\n\n  /**\n   * Delegate to the underlying implementation to sign the transaction\n   * @param transaction\n   * @protected\n   */\n  protected abstract signTransaction(transaction: Transaction): Promise<Transaction>;\n}\n","import { PublicKey } from '@solana/web3.js';\n\nexport const SOLLPAY_PROGRAM_ID = new PublicKey(\n  'ATXuQaCgu1J5BBG9yJC5eAET4GsNinLDBy4GXDvyaqq4',\n);\n\nexport const SOLLPAY_FEE_ACCOUNT = new PublicKey(\n  '7WCEUck5xmRLKrq1PrvQWxNNNafrsbbNv1dABns83RtZ',\n);\n","import BufferLayout from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { ISubscriptionPlanRecord } from 'models/connection/types';\nimport { publicKey, uint64 } from '../layout';\n\nexport const SubscriptionPlanLayout = BufferLayout.struct([\n  BufferLayout.u8('isInitialized'),\n  publicKey('owner'),\n  publicKey('token'),\n  uint64('subscriptionTimeframe'),\n  uint64('maxAmount'),\n]);\n\nexport function parseSubscriptionPlanData(\n  data: Buffer,\n): ISubscriptionPlanRecord {\n  const accountInfo = SubscriptionPlanLayout.decode(data);\n  accountInfo.isInitialized = accountInfo.isInitialized !== 0;\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.token = new PublicKey(accountInfo.token);\n  accountInfo.subscriptionTimeframe = u64.fromBuffer(\n    accountInfo.subscriptionTimeframe,\n  );\n  accountInfo.maxAmount = u64.fromBuffer(accountInfo.maxAmount);\n\n  return accountInfo;\n}\n","import { app } from 'models/app';\nimport { ModalsState, ModalState } from './types';\n\nexport const $modals = app.createStore<ModalsState>([]);\n\nexport const closeModalFx = app.createEffect<\n  {\n    modalId: number;\n    result?: any;\n  },\n  void\n>();\n\nexport const closeModal = app.createEvent<{ modalId: number }>();\n\nexport const openModalFx = app.createEffect<\n  {\n    modalType: string;\n    props?: any;\n  },\n  Promise<unknown>\n>();\n\nexport const openModal = app.createEvent<ModalState>();\n","import BufferLayout from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { ISubscriptionRecord } from 'models/connection/types';\nimport { publicKey, uint64 } from '../layout';\n\nexport const SubscriptionLayout = BufferLayout.struct([\n  BufferLayout.u8('isInitialized'),\n  BufferLayout.u8('isApproved'),\n  publicKey('subscriptionPlanAccount'),\n  publicKey('tokenAddress'),\n  publicKey('owner'),\n  uint64('cycleStart'),\n  uint64('subscriptionTimeframe'),\n  uint64('maxAmount'),\n  uint64('withdrawnAmount'),\n]);\n\nexport function parseSubscriptionData(data: Buffer): ISubscriptionRecord {\n  const accountInfo = SubscriptionLayout.decode(data);\n  accountInfo.isInitialized = accountInfo.isInitialized !== 0;\n  accountInfo.isApproved = accountInfo.isApproved !== 0;\n  accountInfo.subscriptionPlanAccount = new PublicKey(\n    accountInfo.subscriptionPlanAccount,\n  );\n  accountInfo.tokenAddress = new PublicKey(accountInfo.tokenAddress);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.cycleStart = u64.fromBuffer(accountInfo.cycleStart);\n  accountInfo.subscriptionTimeframe = u64.fromBuffer(\n    accountInfo.subscriptionTimeframe,\n  );\n  accountInfo.maxAmount = u64.fromBuffer(accountInfo.maxAmount);\n  accountInfo.withdrawnAmount = u64.fromBuffer(accountInfo.withdrawnAmount);\n\n  return accountInfo;\n}\n","// the default commitment uesd by the Solana web3 connection when checking the blockchain state\nimport { Commitment } from '@solana/web3.js';\n\nexport const isDev =\n  process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\n\n// Can be used in development mode only\nexport const localPrivateKey =\n  isDev && process.env.APP_LOCAL_WALLET_PRIVATE_KEY;\n\nexport const defaultCommitment: Commitment =\n  (process.env.DEFAULT_COMMITMENT as Commitment) || 'singleGossip';\n\n// the amount of time to sleep after sending a transaction\n// in order to work around a known solana web3 bug\nexport const postTransactionSleepMS = Number(\n  process.env.POST_TRANSACTION_SLEEP_MS,\n);\n","import React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst ButtonStyled = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  padding: 8px 11px;\n\n  background-color: rgb(15, 111, 222);\n  border-radius: 5px;\n  box-shadow: rgb(19 45 74 / 12%) 0 0 0 0, rgb(0 0 0 / 20%) 0 2px 4px -2px;\n  transition: opacity 200ms linear 0s, background-color 200ms linear 0s,\n    box-shadow 200ms linear 0s;\n\n  outline: 0;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.9;\n  }\n\n  &:disabled {\n    opacity: 1;\n    background: #a3a5ba;\n    cursor: not-allowed;\n  }\n`;\n\nconst ButtonText = styled.span`\n  color: #fff;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 22px;\n  transition: color 200ms linear 0s;\n`;\n\nexport const Button: FC<ButtonHTMLAttributes<HTMLButtonElement>> = ({\n  children,\n  ...props\n}) => {\n  return (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <ButtonStyled {...props}>\n      <ButtonText>{children}</ButtonText>\n    </ButtonStyled>\n  );\n};\n","export const sleep: (ms: number) => Promise<void> = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\nexport function shortAddress(address: string) {\n  return `${address.slice(0, 4)}…${address.slice(-4)}`;\n}\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { useStore } from 'effector-react';\nimport { Link } from 'react-router-dom';\nimport { $cluster, $connected, changeCluster } from 'models/wallet';\nimport { Select, SelectValueType } from 'components/ui/Select';\nimport { Button } from 'components/ui/Button';\nimport { connectAndCreateClicked } from 'pages/home/model';\nimport { MainContainer } from '../MainContainer';\nimport { ExtendedCluster } from '../../../types/custom';\nimport { connectClicked } from './model';\nimport logoImg from './logo.png';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 64px;\n\n  background: #fff;\n  box-shadow: inset 0 -1px #eaeaea;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Logo = styled.div`\n  width: 92px;\n  height: 39px;\n\n  background: url('${logoImg}') no-repeat 50% 50%;\n  background-size: 92px 39px;\n`;\n\nconst Right = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n`;\n\ninterface Props {\n  showConnect?: boolean;\n}\n\nexport const Header: FC<Props> = ({ showConnect }) => {\n  const cluster = useStore($cluster);\n  const connected = useStore($connected);\n\n  const handleClusterChange = (cluster: SelectValueType) => {\n    changeCluster(cluster as ExtendedCluster);\n  };\n\n  return (\n    <Wrapper>\n      <MainContainer>\n        <Container>\n          <Link to=\"/\">\n            <Logo />\n          </Link>\n          <Right>\n            <Select\n              placeholder=\"Choose network\"\n              selected={cluster}\n              items={[\n                { value: 'mainnet-beta' },\n                { value: 'testnet' },\n                { value: 'devnet' },\n                { value: 'localnet' },\n              ]}\n              onChange={handleClusterChange}\n            />\n            {showConnect ? (\n              <Button onClick={connectAndCreateClicked}>\n                {!connected ? 'Connect' : 'Sign In'}\n              </Button>\n            ) : null}\n          </Right>\n        </Container>\n      </MainContainer>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n\ninterface Props {}\n\nexport const MainContainer: FC<Props> = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n"],"sourceRoot":""}