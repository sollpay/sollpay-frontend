{"version":3,"sources":["utils/connection.ts","components/common/Layout/CustomerMenu/CustomerMenu.tsx","components/common/Layout/UserMenu/UserMenu.tsx","components/common/Layout/Layout.tsx","components/common/Loader/Loader.tsx","components/common/Table/Table.tsx","pages/customer/common.styled.ts","pages/customer/subscriptions/model.ts","pages/customer/subscriptions/Subscriptions.tsx"],"names":["EXPLORER_BASE_URL","getExplorerUrl","type","address","cluster","$cluster","getState","baseUrlWithAddress","LOCALNET_URL","Wrapper","NavLinkMenu","NavLinkText","CustomerMenu","to","UserMenu","Container","Content","Layout","children","Loader","props","Table","Header","Title","Description","ExplorerA","SubscriptionsGate","createGate","$subscriptions","app","createStore","$isLoading","findSubscriptionsFx","pending","on","doneData","_","subscriptions","forward","from","open","sample","source","clock","connectFx","done","target","Subscriptions","useGate","useStore","isLoading","subscription","date","dayjs","isClaimTime","key","href","rel","shortAddress","title","disabled","renderTr","colSpan"],"mappings":"oPAGMA,EAAoB,+BAEbC,EAAiB,WAA0C,IAAzCC,EAAyC,uDAAlC,KAAMC,EAA4B,uCAChEC,EAAUC,IAASC,WAEnBC,EAAqB,GAAH,OAAMP,GAAN,OAA0BE,EAA1B,YAAkCC,GAC1D,OAAQC,GACN,IAAK,SACL,IAAK,UACH,gBAAUG,EAAV,oBAAwCH,GAC1C,IAAK,WACH,gBAAUG,EAAV,qCAAyDC,KAC3D,QACE,OAAOD,K,oKCXPE,EAAO,qDAKPC,EAAW,wDA2BXC,EAAW,2DAIJC,EAAmB,WAC9B,OACE,yBACE,qBAAaC,GAAb,mBACE,mCAEF,qBAAaA,GAAb,2BACE,6C,WC3CFJ,EAAO,sDAKPC,EAAW,uDA2BXC,EAAW,0DAIJG,EAAe,WAC1B,OACE,yBACE,qBAAaD,GAAb,uBACE,6C,WCrCFJ,EAAO,qDAMPM,EAAS,wDAQTC,EAAO,sDAMAC,EAAoB,SAAC,GAAuB,IAAvB,EAAuB,EAAvB,KAAQC,EAAe,EAAfA,SACxC,OACE,yBACE,4BACA,2BACE,yBACGhB,eACC,kBADDA,EACC,MACGA,WACH,kBADGA,EACH,MAHF,KAKA,yBAAS,O,wGCnCbO,EAAO,qDAoGAU,EAAqBC,YAChC,OAAO,kBAAP,EAAO,O,wFCnGIC,EAAK,sD,8LCJLC,EAAM,oDAONC,EAAK,kDAQLC,EAAW,wDASXC,EAAS,qD,uSCjBTC,EAAoBC,cAEpBC,EAAiBC,IAAIC,YAEhC,GAF4B,qEAIjBC,EAAaC,IAAoBC,QAE9CL,EAAeM,GACbF,IAAoBG,UACpB,SAACC,EAAGC,GAAJ,OAAsBA,KAGxBC,kBAAQ,CAAD,SAAC,CACNC,KAAMb,EAAkBc,KACxB3B,GAAImB,KAFC,sDAKPS,iBAAO,CAAD,UAAC,CACLC,OAAQhB,EAAkBc,KAC1BG,MAAOC,IAAUC,KACjBC,OAAQd,MAHJ,sD,ICZOe,EAAoB,WAC/BC,eACA,IAAMX,EAAgBY,YAAtB,GACMC,EAAYD,YAHmB,GAqDrC,OACE,uBAAQ/C,KAAR,YACE,2BACE,6CAEF,oFAGA,2BACE,+BACE,4BACE,uCACA,iDACA,2CACA,qCACA,wCACA,uCAGJ,+BACGmC,OAAmBc,YAAD,OAhEV,SAACA,GAChB,IAAMC,EAAOC,SAAWF,0BAAxB,YACMG,EAAcD,cAClBD,MACED,qCADFC,WADF,QAOA,OACE,wBAAIG,IAAKJ,SAAT,YACE,4BACE,uBACEK,KAAMvD,YAAe,UAAWkD,SADlC,YAEEL,OAFF,SAGEW,IAHF,+BAKGC,YAAaP,SAAd,cAGJ,4BACE,uBACEK,KAAMvD,YAAe,UAEnBkD,uCAHJ,YAKEL,OALF,SAMEW,IANF,+BAQGC,YACCP,uCADF,cAKJ,wBAAIQ,MAAON,cAAX,QAAuCA,SAAD,IACtC,4BAAKF,yBAAD,YACJ,4BAAKA,qCAAD,YACJ,4BACE,uBAAQS,UAAR,cA0BqCC,CAArC,OAEDX,EACC,+BACE,4BACE,wBAAIY,QAAJ,GACE,+BAJR","file":"static/js/4.47a5e22b.chunk.js","sourcesContent":["import { LOCALNET_URL } from 'api/connection';\nimport { $cluster } from '../models/wallet';\n\nconst EXPLORER_BASE_URL = 'https://explorer.solana.com/';\n\nexport const getExplorerUrl = (type = 'tx', address: string): string => {\n  const cluster = $cluster.getState();\n\n  const baseUrlWithAddress = `${EXPLORER_BASE_URL}${type}/${address}`;\n  switch (cluster) {\n    case 'devnet':\n    case 'testnet':\n      return `${baseUrlWithAddress}?cluster=${cluster}`;\n    case 'localnet':\n      return `${baseUrlWithAddress}?cluster=custom&customUrl=${LOCALNET_URL}`;\n    default:\n      return baseUrlWithAddress;\n  }\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { NavLink } from 'react-router-dom';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst NavLinkMenu = styled(NavLink)`\n  display: flex;\n  align-items: center;\n\n  height: 40px;\n  padding: 8px 0;\n\n  color: #666;\n  text-decoration: none;\n\n  border-radius: 8px;\n  transition: color 0.2s ease;\n\n  &:hover {\n    color: #000;\n  }\n\n  &.active {\n    color: #000;\n    font-weight: 700;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 2px;\n  }\n`;\n\nconst NavLinkText = styled.span`\n  font-size: 14px;\n`;\n\nexport const CustomerMenu: FC = () => {\n  return (\n    <Wrapper>\n      <NavLinkMenu to=\"/customer/plans\">\n        <NavLinkText>Plans</NavLinkText>\n      </NavLinkMenu>\n      <NavLinkMenu to=\"/customer/subscriptions\">\n        <NavLinkText>Subscriptions</NavLinkText>\n      </NavLinkMenu>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { NavLink } from 'react-router-dom';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst NavLinkMenu = styled(NavLink)`\n  display: flex;\n  align-items: center;\n\n  height: 40px;\n  padding: 8px 0;\n\n  color: #666;\n  text-decoration: none;\n\n  border-radius: 8px;\n  transition: color 0.2s ease;\n\n  &:hover {\n    color: #000;\n  }\n\n  &.active {\n    color: #000;\n    font-weight: 700;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 2px;\n  }\n`;\n\nconst NavLinkText = styled.span`\n  font-size: 14px;\n`;\n\nexport const UserMenu: FC = () => {\n  return (\n    <Wrapper>\n      <NavLinkMenu to=\"/user/subscriptions\">\n        <NavLinkText>Subscriptions</NavLinkText>\n      </NavLinkMenu>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { MainContainer } from '../MainContainer';\nimport { Header } from '../Header';\nimport { CustomerMenu } from './CustomerMenu';\nimport { UserMenu } from './UserMenu';\n\nconst Wrapper = styled.div`\n  height: 100%;\n\n  background: #fff;\n`;\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 228px 1fr;\n  grid-gap: 24px;\n\n  margin-top: 48px;\n`;\n\nconst Content = styled.div``;\n\ninterface Props {\n  type: 'user' | 'customer';\n}\n\nexport const Layout: FC<Props> = ({ type, children }) => {\n  return (\n    <Wrapper>\n      <Header />\n      <MainContainer>\n        <Container>\n          {type === 'customer' ? (\n            <CustomerMenu />\n          ) : (type === 'user' ? (\n            <UserMenu />\n          ) : null)}\n          <Content>{children}</Content>\n        </Container>\n      </MainContainer>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  @keyframes origamiA {\n    from {\n      transform: rotate(0);\n    }\n    to {\n      transform: rotate(-360deg);\n    }\n  }\n\n  @keyframes origamiB {\n    from,\n    25%,\n    50%,\n    75%,\n    to {\n      opacity: 1;\n      transform: translateZ(0) rotateX(0deg);\n    }\n    12.5%,\n    62.5% {\n      opacity: 1;\n      transform: translateZ(1px) rotateX(-180deg);\n    }\n    37.5%,\n    87.5% {\n      opacity: 0;\n      transform: translateZ(0) rotateX(0deg);\n    }\n  }\n  @keyframes origamiC {\n    from,\n    25%,\n    50%,\n    75%,\n    to {\n      opacity: 1;\n      transform: translateZ(0) rotateZ(180deg) rotateX(0deg);\n    }\n    12.5%,\n    62.5% {\n      opacity: 0;\n      transform: translateZ(0) rotateZ(180deg) rotateX(0deg);\n    }\n    37.5%,\n    87.5% {\n      opacity: 1;\n      transform: translateZ(1px) rotateZ(180deg) rotateX(-180deg);\n    }\n  }\n\n  &,\n  &:before,\n  &:after {\n    animation-duration: 2s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n  }\n\n  & {\n    margin: 0 auto;\n    position: relative;\n    width: 25px;\n    height: 25px;\n  }\n\n  &:before,\n  &:after {\n    background: #0f6fde;\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50%;\n    transform-origin: 50% 100%;\n    clip-path: polygon(0 0, 100% 0, 50% 100%);\n  }\n\n  animation-name: origamiA;\n  animation-timing-function: steps(4);\n\n  &:before,\n  &:after {\n    clip-path: polygon(50% 0, 100% 100%, 0% 100%);\n  }\n\n  &:before {\n    animation-name: origamiB;\n  }\n\n  &:after {\n    animation-name: origamiC;\n    transform: rotate(180deg);\n  }\n`;\n\ninterface Props {}\n\nexport const Loader: FC<Props> = (props) => {\n  return <Wrapper />;\n};\n","import React from 'react';\n\nimport { styled } from '@linaria/react';\n\n\n// TODO: component with all features\nexport const Table = styled.table`\n  width: 100%;\n\n  border-spacing: 0;\n\n  & > thead > tr {\n    height: 40px;\n\n    th:first-child {\n      border-radius: 5px 0 0 5px;\n      border-left: 1px solid #eaeaea;\n    }\n\n    th {\n      position: relative;\n\n      padding: 0 12px;\n\n      color: #666;\n      font-size: 12px;\n      font-weight: 400;\n      letter-spacing: 0;\n      text-transform: uppercase;\n      text-align: left;\n\n      background: #fafafa;\n      border-top: 1px solid #eaeaea;\n      border-bottom: 1px solid #eaeaea;\n\n      vertical-align: middle;\n    }\n\n    th:last-child {\n      border-radius: 0 5px 5px 0;\n      border-right: 1px solid #eaeaea;\n    }\n  }\n\n  & > tbody > tr {\n      height: 48px;\n    \n      font-size: 14px;\n\n      td {\n        padding: 8px 12px;\n        vertical-align: middle;\n        color: #444;\n      }\n\n      &:not(:last-of-type) td {\n        border-bottom: 1px solid #eaeaea;\n      }\n    }\n  }\n\n  & > tfoot > tr {\n    height: 48px;\n  }\n`;\n","import { styled } from '@linaria/react';\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  height: 38px;\n`;\n\nexport const Title = styled.h3`\n  color: #000;\n  font-size: 24px;\n  letter-spacing: -0.47px;\n  font-weight: 600;\n  line-height: 1.5;\n`;\n\nexport const Description = styled.p`\n  margin: 24px 0;\n\n  color: #666;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 1.6;\n`;\n\nexport const ExplorerA = styled.a`\n  color: #666;\n  text-decoration: none;\n\n  transition: color 0.1s ease;\n\n  &:hover {\n    color: #000;\n  }\n`;\n","import { forward, sample } from 'effector';\nimport { createGate } from 'effector-react';\n\nimport { PublicKeyAndAccount } from '@solana/web3.js';\nimport { findSubscriptionsFx } from 'models/connection';\nimport { ISubscriptionRecord } from 'models/connection/types';\nimport { app } from 'models/app';\nimport { connectFx } from 'models/wallet';\n\nexport const SubscriptionsGate = createGate();\n\nexport const $subscriptions = app.createStore<\n  PublicKeyAndAccount<ISubscriptionRecord>[]\n>([]);\n\nexport const $isLoading = findSubscriptionsFx.pending;\n\n$subscriptions.on(\n  findSubscriptionsFx.doneData,\n  (_, subscriptions) => subscriptions,\n);\n\nforward({\n  from: SubscriptionsGate.open,\n  to: findSubscriptionsFx,\n});\n\nsample({\n  source: SubscriptionsGate.open,\n  clock: connectFx.done,\n  target: findSubscriptionsFx,\n});\n","import React, { FC } from 'react';\n\nimport { useGate, useStore } from 'effector-react';\nimport { PublicKeyAndAccount } from '@solana/web3.js';\nimport dayjs from 'dayjs';\nimport { Layout } from 'components/common/Layout';\nimport { shortAddress } from 'utils/common';\nimport { getExplorerUrl } from 'utils/connection';\nimport { Loader } from 'components/common/Loader';\nimport { Table } from 'components/common/Table';\nimport { ISubscriptionRecord } from 'models/connection/types';\nimport { Button } from 'components/ui/Button';\nimport { Header, Description, ExplorerA, Title } from '../common.styled';\nimport { $isLoading, $subscriptions, SubscriptionsGate } from './model';\n\nexport const Subscriptions: FC = () => {\n  useGate(SubscriptionsGate);\n  const subscriptions = useStore($subscriptions);\n  const isLoading = useStore($isLoading);\n\n  // const handleShowPlanModalClick = () => {\n  //   openModalFx({ modalType: MODAL_PLAN });\n  // };\n\n  const renderTr = (subscription: PublicKeyAndAccount<ISubscriptionRecord>) => {\n    const date = dayjs.unix(subscription.account.data.cycleStart.toNumber());\n    const isClaimTime = dayjs().isAfter(\n      date.add(\n        subscription.account.data.subscriptionTimeframe.toNumber(),\n        'day',\n      ),\n    );\n\n    return (\n      <tr key={subscription.pubkey.toBase58()}>\n        <td>\n          <ExplorerA\n            href={getExplorerUrl('address', subscription.pubkey.toBase58())}\n            target=\"_blank\"\n            rel=\"noopener noreferrer noindex\"\n          >\n            {shortAddress(subscription.pubkey.toBase58())}\n          </ExplorerA>\n        </td>\n        <td>\n          <ExplorerA\n            href={getExplorerUrl(\n              'address',\n              subscription.account.data.subscriptionPlanAccount.toBase58(),\n            )}\n            target=\"_blank\"\n            rel=\"noopener noreferrer noindex\"\n          >\n            {shortAddress(\n              subscription.account.data.subscriptionPlanAccount.toBase58(),\n            )}\n          </ExplorerA>\n        </td>\n        <td title={dayjs(date).format('LLL')}>{dayjs().to(date)}</td>\n        <td>{subscription.account.data.maxAmount.toNumber()}</td>\n        <td>{subscription.account.data.subscriptionTimeframe.toNumber()}</td>\n        <td>\n          <Button disabled={!isClaimTime}>Claim</Button>\n        </td>\n      </tr>\n    );\n  };\n\n  return (\n    <Layout type=\"customer\">\n      <Header>\n        <Title>Subscriptions</Title>\n      </Header>\n      <Description>\n        These are subscriptions that users can subscribed to.\n      </Description>\n      <Table>\n        <thead>\n          <tr>\n            <th>Address</th>\n            <th>Subscription Plan</th>\n            <th>Cycle start</th>\n            <th>Price</th>\n            <th>Interval</th>\n            <th>Claim</th>\n          </tr>\n        </thead>\n        <tbody>\n          {subscriptions.map((subscription) => renderTr(subscription))}\n        </tbody>\n        {isLoading ? (\n          <tfoot>\n            <tr>\n              <td colSpan={6}>\n                <Loader />\n              </td>\n            </tr>\n          </tfoot>\n        ) : null}\n      </Table>\n    </Layout>\n  );\n};\n"],"sourceRoot":""}